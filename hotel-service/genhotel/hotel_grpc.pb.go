// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: hotel.proto

package genhotel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Hotel_GetHotel_FullMethodName         = "/Hotel/GetHotel"
	Hotel_DescriptionHotel_FullMethodName = "/Hotel/DescriptionHotel"
	Hotel_GetRooms_FullMethodName         = "/Hotel/GetRooms"
)

// HotelClient is the client API for Hotel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Hotel service definition
type HotelClient interface {
	GetHotel(ctx context.Context, in *VoidHotel, opts ...grpc.CallOption) (*GetHotelResponse, error)
	DescriptionHotel(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*DescriptionResponse, error)
	GetRooms(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*RoomAvailability, error)
}

type hotelClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelClient(cc grpc.ClientConnInterface) HotelClient {
	return &hotelClient{cc}
}

func (c *hotelClient) GetHotel(ctx context.Context, in *VoidHotel, opts ...grpc.CallOption) (*GetHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelResponse)
	err := c.cc.Invoke(ctx, Hotel_GetHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) DescriptionHotel(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*DescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescriptionResponse)
	err := c.cc.Invoke(ctx, Hotel_DescriptionHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) GetRooms(ctx context.Context, in *DescriptionRequest, opts ...grpc.CallOption) (*RoomAvailability, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RoomAvailability)
	err := c.cc.Invoke(ctx, Hotel_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServer is the server API for Hotel service.
// All implementations must embed UnimplementedHotelServer
// for forward compatibility
//
// Hotel service definition
type HotelServer interface {
	GetHotel(context.Context, *VoidHotel) (*GetHotelResponse, error)
	DescriptionHotel(context.Context, *DescriptionRequest) (*DescriptionResponse, error)
	GetRooms(context.Context, *DescriptionRequest) (*RoomAvailability, error)
	mustEmbedUnimplementedHotelServer()
}

// UnimplementedHotelServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServer struct {
}

func (UnimplementedHotelServer) GetHotel(context.Context, *VoidHotel) (*GetHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (UnimplementedHotelServer) DescriptionHotel(context.Context, *DescriptionRequest) (*DescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescriptionHotel not implemented")
}
func (UnimplementedHotelServer) GetRooms(context.Context, *DescriptionRequest) (*RoomAvailability, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedHotelServer) mustEmbedUnimplementedHotelServer() {}

// UnsafeHotelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServer will
// result in compilation errors.
type UnsafeHotelServer interface {
	mustEmbedUnimplementedHotelServer()
}

func RegisterHotelServer(s grpc.ServiceRegistrar, srv HotelServer) {
	s.RegisterService(&Hotel_ServiceDesc, srv)
}

func _Hotel_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidHotel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_GetHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).GetHotel(ctx, req.(*VoidHotel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_DescriptionHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).DescriptionHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_DescriptionHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).DescriptionHotel(ctx, req.(*DescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).GetRooms(ctx, req.(*DescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hotel_ServiceDesc is the grpc.ServiceDesc for Hotel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hotel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hotel",
	HandlerType: (*HotelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHotel",
			Handler:    _Hotel_GetHotel_Handler,
		},
		{
			MethodName: "DescriptionHotel",
			Handler:    _Hotel_DescriptionHotel_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _Hotel_GetRooms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}

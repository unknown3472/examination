// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: booking.proto

package genbooking_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BookingService_AddBooking_FullMethodName     = "/BookingService/AddBooking"
	BookingService_GetBooking_FullMethodName     = "/BookingService/GetBooking"
	BookingService_PutBooking_FullMethodName     = "/BookingService/PutBooking"
	BookingService_DelBooking_FullMethodName     = "/BookingService/DelBooking"
	BookingService_GetUserBooking_FullMethodName = "/BookingService/GetUserBooking"
	BookingService_GetUserEmail_FullMethodName   = "/BookingService/GetUserEmail"
)

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	AddBooking(ctx context.Context, in *PostBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	GetBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	PutBooking(ctx context.Context, in *PutBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	DelBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*DeleteBookingResponse, error)
	GetUserBooking(ctx context.Context, in *UserBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	GetUserEmail(ctx context.Context, in *UserBookingRequest, opts ...grpc.CallOption) (*UserBookingEmail, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) AddBooking(ctx context.Context, in *PostBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, BookingService_AddBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, BookingService_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) PutBooking(ctx context.Context, in *PutBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, BookingService_PutBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DelBooking(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*DeleteBookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBookingResponse)
	err := c.cc.Invoke(ctx, BookingService_DelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetUserBooking(ctx context.Context, in *UserBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, BookingService_GetUserBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetUserEmail(ctx context.Context, in *UserBookingRequest, opts ...grpc.CallOption) (*UserBookingEmail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserBookingEmail)
	err := c.cc.Invoke(ctx, BookingService_GetUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	AddBooking(context.Context, *PostBookingRequest) (*BookingResponse, error)
	GetBooking(context.Context, *BookingRequest) (*BookingResponse, error)
	PutBooking(context.Context, *PutBookingRequest) (*BookingResponse, error)
	DelBooking(context.Context, *BookingRequest) (*DeleteBookingResponse, error)
	GetUserBooking(context.Context, *UserBookingRequest) (*BookingResponse, error)
	GetUserEmail(context.Context, *UserBookingRequest) (*UserBookingEmail, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) AddBooking(context.Context, *PostBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBooking(context.Context, *BookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingServiceServer) PutBooking(context.Context, *PutBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBooking not implemented")
}
func (UnimplementedBookingServiceServer) DelBooking(context.Context, *BookingRequest) (*DeleteBookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetUserBooking(context.Context, *UserBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetUserEmail(context.Context, *UserBookingRequest) (*UserBookingEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmail not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_AddBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).AddBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_AddBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).AddBooking(ctx, req.(*PostBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBooking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_PutBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).PutBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_PutBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).PutBooking(ctx, req.(*PutBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_DelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DelBooking(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetUserBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetUserBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetUserBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetUserBooking(ctx, req.(*UserBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookingService_GetUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetUserEmail(ctx, req.(*UserBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBooking",
			Handler:    _BookingService_AddBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _BookingService_GetBooking_Handler,
		},
		{
			MethodName: "PutBooking",
			Handler:    _BookingService_PutBooking_Handler,
		},
		{
			MethodName: "DelBooking",
			Handler:    _BookingService_DelBooking_Handler,
		},
		{
			MethodName: "GetUserBooking",
			Handler:    _BookingService_GetUserBooking_Handler,
		},
		{
			MethodName: "GetUserEmail",
			Handler:    _BookingService_GetUserEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking.proto",
}
